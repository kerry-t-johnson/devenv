
- name: Ensure downloadpath
  ansible.builtin.file:
    name: "{{ download_path }}"
    state: directory

# ----- kubectl --------------------------------------------------------------
- name: Ensure kubectl downloadpath
  ansible.builtin.file:
    name: "{{ download_path }}/kubectl-{{ kubectl_version }}"
    state: directory

- name: Download Kubectl CLI ({{ kubectl_version }})
  ansible.builtin.get_url:
    url: https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/amd64/kubectl
    dest: "{{ download_path }}/kubectl-{{ kubectl_version }}/kubectl-linux-amd64"
    mode: 0555

- name: Link Kubectl CLI
  ansible.builtin.file:
    src: "{{ download_path }}/kubectl-{{ kubectl_version }}/kubectl-linux-amd64"
    dest: /usr/local/bin/kubectl
    state: link

# ----- k9s -------------------------------------------------------------------
- name: Ensure k9s downloadpath
  ansible.builtin.file:
    name: "{{ download_path }}/k9s-{{ k9s_version }}"
    state: directory

- name: Download k9s CLI ({{ k9s_version }})
  ansible.builtin.get_url:
    url: https://github.com/derailed/k9s/releases/download/{{ k9s_version }}/k9s_Linux_amd64.tar.gz
    dest: "{{ download_path }}/k9s-{{ k9s_version }}/k9s_Linux_amd64.tar.gz"

- name: Extract k9s CLI
  ansible.builtin.unarchive:
    src: "{{ download_path }}/k9s-{{ k9s_version }}/k9s_Linux_amd64.tar.gz"
    dest: "{{ download_path }}/k9s-{{ k9s_version }}"
    remote_src: true
    mode: 0555

- name: Link k9s CLI
  ansible.builtin.file:
    src: "{{ download_path }}/k9s-{{ k9s_version }}/k9s"
    dest: /usr/local/bin/k9s
    state: link

# ----- Helm ------------------------------------------------------------------
- name: Ensure Helm downloadpath
  ansible.builtin.file:
    name: "{{ download_path }}/helm-{{ helm_version }}"
    state: directory

- name: Download Helm CLI ({{ helm_version }})
  ansible.builtin.get_url:
    url:  https://get.helm.sh/helm-{{ helm_version }}-linux-amd64.tar.gz
    dest: "{{ download_path }}/helm-{{ helm_version }}/helm-{{ helm_version }}-linux-amd64.tar.gz"
    decompress: false

- name: Extract Helm CLI
  ansible.builtin.unarchive:
    src: "{{ download_path }}/helm-{{ helm_version }}/helm-{{ helm_version }}-linux-amd64.tar.gz"
    dest: "{{ download_path }}/helm-{{ helm_version }}"
    remote_src: true
    mode: 0555

- name: Link Helm CLI
  ansible.builtin.file:
    src: "{{ download_path }}/helm-{{ helm_version }}/linux-amd64/helm"
    dest: /usr/local/bin/helm
    state: link

# ----- ArgoCD ----------------------------------------------------------------
- name: Ensure ArgoCD downloadpath
  ansible.builtin.file:
    name: "{{ download_path }}/argocd-{{ argocd_version }}"
    state: directory

- name: Download ArgoCD CLI ({{ argocd_version }})
  ansible.builtin.get_url:
    url: https://github.com/argoproj/argo-cd/releases/download/{{ argocd_version }}/argocd-linux-amd64
    dest: "{{ download_path }}/argocd-{{ argocd_version}}/argocd-linux-amd64"
    mode: 0555

- name: Link ArgoCD CLI
  ansible.builtin.file:
    src: "{{ download_path }}/argocd-{{ argocd_version}}/argocd-linux-amd64"
    dest: /usr/local/bin/argocd
    state: link

# ----- Telepresence and Wintun -----------------------------------------------
## NOTE: Telepresence and Wintun must be used as Windows applications
- name: Ensure user bin path (windows)
  ansible.builtin.file:
    name: "{{ win_root }}/Users/{{ win_username }}/bin"
    state: directory

- name: Ensure Telepresence downloadpath
  ansible.builtin.file:
    name: "{{ download_path }}/telepresence-{{ telepresence_version }}"
    state: directory

- name: Download Telepresence CLI ({{ telepresence_version }})
  ansible.builtin.get_url:
    url:  https://app.getambassador.io/download/tel2oss/releases/download/{{ telepresence_version }}/telepresence-windows-amd64.exe
    dest: "{{ download_path }}/telepresence-{{ telepresence_version }}/telepresence-windows-amd64.exe"
    mode: 0555

- name: Copy Telepresence CLI to Window User's PATH
  ansible.builtin.copy:
    src: "{{ download_path }}/telepresence-{{ telepresence_version }}/telepresence-windows-amd64.exe"
    dest: "{{ win_root }}/Users/{{ win_username }}/bin/telepresence-windows-amd64.exe"
    mode: 0555

- name: Ensure Wintun downloadpath
  ansible.builtin.file:
    name: "{{ download_path }}/wintun-{{ wintun_version }}"
    state: directory

- name: Download Wintun (Telepresence dependency, {{ wintun_version }})
  ansible.builtin.get_url:
    url:  https://www.wintun.net/builds/wintun-{{ wintun_version }}.zip
    dest: "{{ download_path }}/wintun-{{ wintun_version }}/wintun-{{ wintun_version }}.zip"

- name: Extract Wintun (Telepresence dependency)
  ansible.builtin.unarchive:
    src: "{{ download_path }}/wintun-{{ wintun_version }}/wintun-{{ wintun_version }}.zip"
    dest: "{{ download_path }}/wintun-{{ wintun_version }}"
    remote_src: true
    mode: 0555

- name: Copy Wintun DLL to Windows User's PATH
  ansible.builtin.copy:
    src: "{{ download_path }}/wintun-{{ wintun_version }}/wintun/bin/amd64/wintun.dll"
    dest: "{{ win_root }}/Users/{{ win_username }}/bin/wintun.dll"

